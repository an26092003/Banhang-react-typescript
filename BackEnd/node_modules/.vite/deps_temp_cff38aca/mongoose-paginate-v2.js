import {
  __commonJS
} from "./chunk-CQXHTUV2.js";

// node_modules/mongoose-paginate-v2/dist/pagination-parameters.js
var require_pagination_parameters = __commonJS({
  "node_modules/mongoose-paginate-v2/dist/pagination-parameters.js"(exports, module) {
    "use strict";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var PaginationParametersHelper = function() {
      function PaginationParametersHelper2(request) {
        _classCallCheck(this, PaginationParametersHelper2);
        this.query = request.query;
      }
      _createClass(PaginationParametersHelper2, [{
        key: "booleanOpt",
        value: function booleanOpt(option) {
          return typeof option === "string" ? option === "true" : option;
        }
        /**
         * Handle options that are strings or objects (including arrays)
         *
         * @param {object|string} option
         * @return {object|string}
         * */
      }, {
        key: "optObjectOrString",
        value: function optObjectOrString(option) {
          var openingBrackets = ["{", "["];
          var closingBrackets = ["}", "]"];
          var firstCharIsBracket = option[0] && openingBrackets.includes(option[0]);
          var lastCharIsBracket = option[option.length - 1] && closingBrackets.includes(option[option.length - 1]);
          var optionIsObject = firstCharIsBracket && lastCharIsBracket;
          try {
            return optionIsObject ? JSON.parse(option) : option;
          } catch (err) {
            return {};
          }
        }
        /**
         * Yields the "query" parameter for Model.paginate()
         * given any attributes of the Express req.query-Object,
         * */
      }, {
        key: "getQuery",
        value: function getQuery() {
          var _this$query;
          var filtersQueryParameter = (_this$query = this.query) === null || _this$query === void 0 ? void 0 : _this$query.query;
          if (!filtersQueryParameter)
            return {};
          try {
            return JSON.parse(filtersQueryParameter);
          } catch (err) {
            return {};
          }
        }
        /**
         * Yields the "options" parameter for Model.paginate(),
         * given any attributes of the Express req.query-Object
         * */
      }, {
        key: "getOptions",
        value: function getOptions() {
          if (!this.query)
            return {};
          var options = {};
          var select = this.query.select, collation = this.query.collation, sort = this.query.sort, populate = this.query.populate, projection = this.query.projection, lean = this.query.lean, leanWithId = this.query.leanWithId, offset = this.query.offset, page = this.query.page, limit = this.query.limit, customLabels = this.query.customLabels, pagination = this.query.pagination, useEstimatedCount = this.query.useEstimatedCount, useCustomCountFn = this.query.useCustomCountFn, forceCountFn = this.query.forceCountFn, allowDiskUse = this.query.allowDiskUse, read = this.query.read, mongooseOptions = this.query.options;
          if (select)
            options["select"] = this.optObjectOrString(select);
          if (collation)
            options["collation"] = this.optObjectOrString(collation);
          if (sort)
            options["sort"] = this.optObjectOrString(sort);
          if (populate)
            options["populate"] = this.optObjectOrString(populate);
          if (projection !== void 0)
            options["projection"] = this.optObjectOrString(projection);
          if (lean !== void 0)
            options["lean"] = this.booleanOpt(lean);
          if (leanWithId !== void 0)
            options["leanWithId"] = this.booleanOpt(leanWithId);
          if (offset)
            options["offset"] = Number(offset);
          if (page)
            options["page"] = Number(page);
          if (limit || limit == 0)
            options["limit"] = Number(limit);
          if (customLabels)
            options["customLabels"] = this.optObjectOrString(customLabels);
          if (pagination !== void 0)
            options["pagination"] = this.booleanOpt(pagination);
          if (useEstimatedCount !== void 0)
            options["useEstimatedCount"] = this.booleanOpt(useEstimatedCount);
          if (useCustomCountFn !== void 0)
            options["useCustomCountFn"] = this.booleanOpt(useCustomCountFn);
          if (forceCountFn !== void 0)
            options["forceCountFn"] = this.booleanOpt(forceCountFn);
          if (allowDiskUse)
            options["allowDiskUse"] = this.booleanOpt(allowDiskUse);
          if (read)
            options["read"] = this.optObjectOrString(read);
          if (mongooseOptions)
            options["options"] = this.getOptions(mongooseOptions);
          return options;
        }
        /**
         * Yields an array with positions:
         * [0] "query" parameter, for Model.paginate()
         * [1] "options" parameter, for Model.paginate()
         * */
      }, {
        key: "get",
        value: function get() {
          return [_objectSpread({}, this.getQuery()), _objectSpread({}, this.getOptions())];
        }
      }]);
      return PaginationParametersHelper2;
    }();
    module.exports = PaginationParametersHelper;
  }
});

// node_modules/mongoose-paginate-v2/dist/pagination-subdocs.js
var require_pagination_subdocs = __commonJS({
  "node_modules/mongoose-paginate-v2/dist/pagination-subdocs.js"(exports, module) {
    "use strict";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function paginateSubDocs(query, options, callback) {
      function getSubDocsPopulate(option) {
        var populate2 = option.populate, _option$page = option.page, page = _option$page === void 0 ? 1 : _option$page, _option$limit = option.limit, limit = _option$limit === void 0 ? 10 : _option$limit;
        if (!populate2) {
          throw new Error("populate is required");
        }
        var offset = (page - 1) * limit;
        option.offset = offset;
        var pagination2 = {
          skip: offset,
          limit
        };
        if (typeof populate2 === "string") {
          populate2 = _objectSpread({
            path: populate2
          }, pagination2);
        } else if (typeof populate2 === "object" && !Array.isArray(populate2)) {
          populate2 = Object.assign(populate2, pagination2);
        }
        option.populate = populate2;
        return populate2;
      }
      function populateResult(result, populate2, callback2) {
        return result.populate(populate2, callback2);
      }
      function constructDocs(paginatedResult, option) {
        var populate2 = option.populate, _option$offset = option.offset, offset = _option$offset === void 0 ? 0 : _option$offset, _option$page2 = option.page, page = _option$page2 === void 0 ? 1 : _option$page2, _option$limit2 = option.limit, limit = _option$limit2 === void 0 ? 10 : _option$limit2;
        var path = populate2.path;
        var count = option.count;
        var paginatedDocs = paginatedResult[path];
        if (!paginatedDocs) {
          throw new Error(`Parse error! Cannot find key on result with path ${path}`);
        }
        page = Math.ceil((offset + 1) / limit);
        var meta = {
          docs: paginatedDocs,
          totalDocs: count || 1,
          limit,
          page,
          prevPage: null,
          nextPage: null,
          hasPrevPage: false,
          hasNextPage: false
        };
        var totalPages = limit > 0 ? Math.ceil(count / limit) || 1 : null;
        meta.totalPages = totalPages;
        meta.pagingCounter = (page - 1) * limit + 1;
        if (page > 1) {
          meta.hasPrevPage = true;
          meta.prevPage = page - 1;
        } else if (page == 1 && offset !== 0) {
          meta.hasPrevPage = true;
          meta.prevPage = 1;
        }
        if (page < totalPages) {
          meta.hasNextPage = true;
          meta.nextPage = page + 1;
        }
        if (limit == 0) {
          meta.limit = 0;
          meta.totalPages = 1;
          meta.page = 1;
          meta.pagingCounter = 1;
        }
        Object.defineProperty(paginatedResult, path, {
          value: meta,
          writable: false
        });
      }
      var populate = options.populate, _options$read = options.read, read = _options$read === void 0 ? {} : _options$read, _options$select = options.select, select = _options$select === void 0 ? "" : _options$select, _options$pagination = options.pagination, pagination = _options$pagination === void 0 ? true : _options$pagination, pagingOptions = options.pagingOptions, projection = options.projection;
      var mQuery = this.findOne(query, projection);
      if (read && read.pref) {
        mQuery.read(read.pref, read.tags);
      }
      if (select) {
        mQuery.select(select);
      }
      return new Promise(function(resolve, reject) {
        mQuery.exec().then(function(result) {
          var newPopulate = [];
          if (populate) {
            newPopulate.push(newPopulate);
          }
          if (pagination && pagingOptions) {
            if (Array.isArray(pagingOptions)) {
              pagingOptions.forEach(function(option) {
                var populate2 = getSubDocsPopulate(option);
                option.count = result[populate2.path].length;
                newPopulate.push(populate2);
              });
            } else {
              var _populate = getSubDocsPopulate(pagingOptions);
              pagingOptions.count = result[_populate.path].length;
              newPopulate.push(_populate);
            }
          }
          populateResult(result, newPopulate, function(err, paginatedResult) {
            if (err) {
              callback(err, null);
              reject(err);
              return;
            }
            if (pagination && pagingOptions) {
              if (Array.isArray(pagingOptions)) {
                pagingOptions.forEach(function(option) {
                  constructDocs(paginatedResult, option);
                });
              } else {
                constructDocs(paginatedResult, pagingOptions);
              }
            }
            callback && callback(null, paginatedResult);
            resolve(paginatedResult);
          });
        }).catch(function(err) {
          console.error(err.message);
          callback && callback(err, null);
        });
      });
    }
    module.exports = paginateSubDocs;
  }
});

// node_modules/mongoose-paginate-v2/dist/index.js
var require_dist = __commonJS({
  "node_modules/mongoose-paginate-v2/dist/index.js"(exports, module) {
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var PaginationParametersHelper = require_pagination_parameters();
    var paginateSubDocsHelper = require_pagination_subdocs();
    var defaultOptions = {
      customLabels: {
        totalDocs: "totalDocs",
        limit: "limit",
        page: "page",
        totalPages: "totalPages",
        docs: "docs",
        nextPage: "nextPage",
        prevPage: "prevPage",
        pagingCounter: "pagingCounter",
        hasPrevPage: "hasPrevPage",
        hasNextPage: "hasNextPage",
        meta: null
      },
      collation: {},
      lean: false,
      leanWithId: true,
      limit: 10,
      projection: {},
      select: "",
      options: {},
      pagination: true,
      useEstimatedCount: false,
      useCustomCountFn: false,
      forceCountFn: false,
      allowDiskUse: false,
      customFind: "find"
    };
    function paginate(query, options, callback) {
      options = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions), paginate.options), options);
      query = query || {};
      var _options = options, collation = _options.collation, lean = _options.lean, leanWithId = _options.leanWithId, populate = _options.populate, projection = _options.projection, read = _options.read, select = _options.select, sort = _options.sort, pagination = _options.pagination, useEstimatedCount = _options.useEstimatedCount, useCustomCountFn = _options.useCustomCountFn, forceCountFn = _options.forceCountFn, allowDiskUse = _options.allowDiskUse, customFind = _options.customFind;
      var customLabels = _objectSpread(_objectSpread({}, defaultOptions.customLabels), options.customLabels);
      var limit = defaultOptions.limit;
      if (pagination) {
        limit = parseInt(options.limit, 10) > 0 ? parseInt(options.limit, 10) : 0;
      }
      var isCallbackSpecified = typeof callback === "function";
      var findOptions = options.options;
      var offset;
      var page;
      var skip;
      var docsPromise = [];
      var labelDocs = customLabels.docs;
      var labelLimit = customLabels.limit;
      var labelNextPage = customLabels.nextPage;
      var labelPage = customLabels.page;
      var labelPagingCounter = customLabels.pagingCounter;
      var labelPrevPage = customLabels.prevPage;
      var labelTotal = customLabels.totalDocs;
      var labelTotalPages = customLabels.totalPages;
      var labelHasPrevPage = customLabels.hasPrevPage;
      var labelHasNextPage = customLabels.hasNextPage;
      var labelMeta = customLabels.meta;
      if (Object.prototype.hasOwnProperty.call(options, "offset")) {
        offset = parseInt(options.offset, 10);
        skip = offset;
      } else if (Object.prototype.hasOwnProperty.call(options, "page")) {
        page = parseInt(options.page, 10) < 1 ? 1 : parseInt(options.page, 10);
        skip = (page - 1) * limit;
      } else {
        offset = 0;
        page = 1;
        skip = offset;
      }
      if (!pagination) {
        page = 1;
      }
      var countPromise;
      if (pagination) {
        if (forceCountFn === true) {
          if (Object.keys(collation).length > 0) {
            countPromise = this.count(query).collation(collation).exec();
          } else {
            countPromise = this.count(query).exec();
          }
        } else {
          if (useEstimatedCount === true) {
            countPromise = this.estimatedDocumentCount().exec();
          } else if (typeof useCustomCountFn === "function") {
            countPromise = useCustomCountFn();
          } else {
            if (Object.keys(collation).length > 0) {
              countPromise = this.countDocuments(query).collation(collation).exec();
            } else {
              countPromise = this.countDocuments(query).exec();
            }
          }
        }
      }
      if (limit) {
        var mQuery = this[customFind](query, projection, findOptions);
        if (populate) {
          mQuery.populate(populate);
        }
        mQuery.select(select);
        mQuery.sort(sort);
        mQuery.lean(lean);
        if (read && read.pref) {
          mQuery.read(read.pref, read.tags);
        }
        if (Object.keys(collation).length > 0) {
          mQuery.collation(collation);
        }
        if (pagination) {
          mQuery.skip(skip);
          mQuery.limit(limit);
        }
        try {
          if (allowDiskUse === true) {
            mQuery.allowDiskUse();
          }
        } catch (ex) {
          console.error("Your MongoDB version does not support `allowDiskUse`.");
        }
        docsPromise = mQuery.exec();
        if (lean && leanWithId) {
          docsPromise = docsPromise.then(function(docs) {
            docs.forEach(function(doc) {
              if (doc._id) {
                doc.id = String(doc._id);
              }
            });
            return docs;
          });
        }
      }
      return Promise.all([countPromise, docsPromise]).then(function(values) {
        var count = values[0];
        var docs = values[1];
        if (pagination !== true) {
          count = docs.length;
        }
        var meta = {
          [labelTotal]: count
        };
        var result = {};
        if (typeof offset !== "undefined") {
          meta.offset = offset;
          page = Math.ceil((offset + 1) / limit);
        }
        var pages = limit > 0 ? Math.ceil(count / limit) || 1 : null;
        meta[labelLimit] = count;
        meta[labelTotalPages] = 1;
        meta[labelPage] = page;
        meta[labelPagingCounter] = (page - 1) * limit + 1;
        meta[labelHasPrevPage] = false;
        meta[labelHasNextPage] = false;
        meta[labelPrevPage] = null;
        meta[labelNextPage] = null;
        if (pagination) {
          meta[labelLimit] = limit;
          meta[labelTotalPages] = pages;
          if (page > 1) {
            meta[labelHasPrevPage] = true;
            meta[labelPrevPage] = page - 1;
          } else if (page == 1 && typeof offset !== "undefined" && offset !== 0) {
            meta[labelHasPrevPage] = true;
            meta[labelPrevPage] = 1;
          }
          if (page < pages) {
            meta[labelHasNextPage] = true;
            meta[labelNextPage] = page + 1;
          }
        }
        delete meta["false"];
        if (limit == 0) {
          meta[labelLimit] = 0;
          meta[labelTotalPages] = 1;
          meta[labelPage] = 1;
          meta[labelPagingCounter] = 1;
          meta[labelPrevPage] = null;
          meta[labelNextPage] = null;
          meta[labelHasPrevPage] = false;
          meta[labelHasNextPage] = false;
        }
        if (labelMeta) {
          result = {
            [labelDocs]: docs,
            [labelMeta]: meta
          };
        } else {
          result = _objectSpread({
            [labelDocs]: docs
          }, meta);
        }
        return isCallbackSpecified ? callback(null, result) : Promise.resolve(result);
      }).catch(function(error) {
        return isCallbackSpecified ? callback(error) : Promise.reject(error);
      });
    }
    module.exports = function(schema) {
      schema.statics.paginate = paginate;
      schema.statics.paginateSubDocs = paginateSubDocsHelper;
    };
    module.exports.PaginationParameters = PaginationParametersHelper;
    module.exports.paginateSubDocs = paginateSubDocsHelper;
    module.exports.paginate = paginate;
  }
});
export default require_dist();
//# sourceMappingURL=mongoose-paginate-v2.js.map
