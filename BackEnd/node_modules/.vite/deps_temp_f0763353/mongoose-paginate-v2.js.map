{
  "version": 3,
  "sources": ["../../mongoose-paginate-v2/dist/pagination-parameters.js", "../../mongoose-paginate-v2/dist/pagination-subdocs.js", "../../mongoose-paginate-v2/dist/index.js"],
  "sourcesContent": ["\"use strict\";\r\n\r\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\r\n\r\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\r\n\r\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\r\n\r\nvar PaginationParametersHelper = /*#__PURE__*/function () {\r\n  function PaginationParametersHelper(request) {\r\n    _classCallCheck(this, PaginationParametersHelper);\r\n\r\n    this.query = request.query;\r\n  }\r\n  /**\r\n   * Handle boolean options\r\n   * If the 'option'-Parameter is a string, check if it equals 'true'\r\n   * If not, it should be a boolean, and can be returned as it is.\r\n   *\r\n   * @param {string|boolean} option\r\n   * @return {boolean}\r\n   * */\r\n\r\n\r\n  _createClass(PaginationParametersHelper, [{\r\n    key: \"booleanOpt\",\r\n    value: function booleanOpt(option) {\r\n      return typeof option === 'string' ? option === 'true' : option;\r\n    }\r\n    /**\r\n     * Handle options that are strings or objects (including arrays)\r\n     *\r\n     * @param {object|string} option\r\n     * @return {object|string}\r\n     * */\r\n\r\n  }, {\r\n    key: \"optObjectOrString\",\r\n    value: function optObjectOrString(option) {\r\n      // Since the JSON in the query object will be strings,\r\n      // we need to be able to detect this, in order to differentiate between JSON-objects and pure strings.\r\n      // a pure string, e.g. 'field -test', might not be parsed as wished by JSON.parse\r\n      var openingBrackets = ['{', '['];\r\n      var closingBrackets = ['}', ']'];\r\n      var firstCharIsBracket = option[0] && openingBrackets.includes(option[0]);\r\n      var lastCharIsBracket = option[option.length - 1] && closingBrackets.includes(option[option.length - 1]);\r\n      var optionIsObject = firstCharIsBracket && lastCharIsBracket;\r\n\r\n      try {\r\n        return optionIsObject ? JSON.parse(option) : option;\r\n      } catch (err) {\r\n        // Fallback for parsing errors of objects\r\n        return {};\r\n      }\r\n    }\r\n    /**\r\n     * Yields the \"query\" parameter for Model.paginate()\r\n     * given any attributes of the Express req.query-Object,\r\n     * */\r\n\r\n  }, {\r\n    key: \"getQuery\",\r\n    value: function getQuery() {\r\n      var _this$query;\r\n\r\n      var filtersQueryParameter = (_this$query = this.query) === null || _this$query === void 0 ? void 0 : _this$query.query;\r\n      if (!filtersQueryParameter) return {};\r\n\r\n      try {\r\n        return JSON.parse(filtersQueryParameter);\r\n      } catch (err) {\r\n        return {};\r\n      }\r\n    }\r\n    /**\r\n     * Yields the \"options\" parameter for Model.paginate(),\r\n     * given any attributes of the Express req.query-Object\r\n     * */\r\n\r\n  }, {\r\n    key: \"getOptions\",\r\n    value: function getOptions() {\r\n      if (!this.query) return {};\r\n      var options = {}; // Instantiate variables with all the possible options for Model.paginate()\r\n\r\n      var select = this.query.select,\r\n          collation = this.query.collation,\r\n          sort = this.query.sort,\r\n          populate = this.query.populate,\r\n          projection = this.query.projection,\r\n          lean = this.query.lean,\r\n          leanWithId = this.query.leanWithId,\r\n          offset = this.query.offset,\r\n          page = this.query.page,\r\n          limit = this.query.limit,\r\n          customLabels = this.query.customLabels,\r\n          pagination = this.query.pagination,\r\n          useEstimatedCount = this.query.useEstimatedCount,\r\n          useCustomCountFn = this.query.useCustomCountFn,\r\n          forceCountFn = this.query.forceCountFn,\r\n          allowDiskUse = this.query.allowDiskUse,\r\n          read = this.query.read,\r\n          mongooseOptions = this.query.options; // For every option that is set, add it to the 'options' object-literal\r\n\r\n      if (select) options['select'] = this.optObjectOrString(select);\r\n      if (collation) options['collation'] = this.optObjectOrString(collation);\r\n      if (sort) options['sort'] = this.optObjectOrString(sort);\r\n      if (populate) options['populate'] = this.optObjectOrString(populate);\r\n      if (projection !== undefined) options['projection'] = this.optObjectOrString(projection);\r\n      if (lean !== undefined) options['lean'] = this.booleanOpt(lean);\r\n      if (leanWithId !== undefined) options['leanWithId'] = this.booleanOpt(leanWithId);\r\n      if (offset) options['offset'] = Number(offset);\r\n      if (page) options['page'] = Number(page);\r\n      if (limit || limit == 0) options['limit'] = Number(limit);\r\n      if (customLabels) options['customLabels'] = this.optObjectOrString(customLabels);\r\n      if (pagination !== undefined) options['pagination'] = this.booleanOpt(pagination);\r\n      if (useEstimatedCount !== undefined) options['useEstimatedCount'] = this.booleanOpt(useEstimatedCount);\r\n      if (useCustomCountFn !== undefined) options['useCustomCountFn'] = this.booleanOpt(useCustomCountFn);\r\n      if (forceCountFn !== undefined) options['forceCountFn'] = this.booleanOpt(forceCountFn);\r\n      if (allowDiskUse) options['allowDiskUse'] = this.booleanOpt(allowDiskUse);\r\n      if (read) options['read'] = this.optObjectOrString(read);\r\n      if (mongooseOptions) options['options'] = this.getOptions(mongooseOptions);\r\n      return options;\r\n    }\r\n    /**\r\n     * Yields an array with positions:\r\n     * [0] \"query\" parameter, for Model.paginate()\r\n     * [1] \"options\" parameter, for Model.paginate()\r\n     * */\r\n\r\n  }, {\r\n    key: \"get\",\r\n    value: function get() {\r\n      return [_objectSpread({}, this.getQuery()), _objectSpread({}, this.getOptions())];\r\n    }\r\n  }]);\r\n\r\n  return PaginationParametersHelper;\r\n}();\r\n\r\nmodule.exports = PaginationParametersHelper;", "\"use strict\";\r\n\r\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\r\n\r\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\r\n\r\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\n/**\r\n * Pagination process for sub-documents\r\n * internally, it would call `query.findOne`, return only one document\r\n *\r\n * @param {Object} query\r\n * @param {Object} options\r\n * @param {Function} callback\r\n */\r\nfunction paginateSubDocs(query, options, callback) {\r\n  /**\r\n   * Populate sub documents with pagination fields\r\n   *\r\n   * @param {Object} query\r\n   * @param {Object} populate origin populate option\r\n   * @param {Object} option\r\n   */\r\n  function getSubDocsPopulate(option) {\r\n    // options properties for sub-documents pagination\r\n    var populate = option.populate,\r\n        _option$page = option.page,\r\n        page = _option$page === void 0 ? 1 : _option$page,\r\n        _option$limit = option.limit,\r\n        limit = _option$limit === void 0 ? 10 : _option$limit;\r\n\r\n    if (!populate) {\r\n      throw new Error('populate is required');\r\n    }\r\n\r\n    var offset = (page - 1) * limit;\r\n    option.offset = offset;\r\n    var pagination = {\r\n      skip: offset,\r\n      limit: limit\r\n    };\r\n\r\n    if (typeof populate === 'string') {\r\n      populate = _objectSpread({\r\n        path: populate\r\n      }, pagination);\r\n    } else if (typeof populate === 'object' && !Array.isArray(populate)) {\r\n      populate = Object.assign(populate, pagination);\r\n    }\r\n\r\n    option.populate = populate;\r\n    return populate;\r\n  }\r\n\r\n  function populateResult(result, populate, callback) {\r\n    return result.populate(populate, callback);\r\n  }\r\n  /**\r\n   * Convert result of sub-docs list to pagination like docs\r\n   *\r\n   * @param {Object} result query result\r\n   * @param {Object} option pagination option\r\n   */\r\n\r\n\r\n  function constructDocs(paginatedResult, option) {\r\n    var populate = option.populate,\r\n        _option$offset = option.offset,\r\n        offset = _option$offset === void 0 ? 0 : _option$offset,\r\n        _option$page2 = option.page,\r\n        page = _option$page2 === void 0 ? 1 : _option$page2,\r\n        _option$limit2 = option.limit,\r\n        limit = _option$limit2 === void 0 ? 10 : _option$limit2;\r\n    var path = populate.path;\r\n    var count = option.count;\r\n    var paginatedDocs = paginatedResult[path];\r\n\r\n    if (!paginatedDocs) {\r\n      throw new Error(`Parse error! Cannot find key on result with path ${path}`);\r\n    }\r\n\r\n    page = Math.ceil((offset + 1) / limit); // set default meta\r\n\r\n    var meta = {\r\n      docs: paginatedDocs,\r\n      totalDocs: count || 1,\r\n      limit: limit,\r\n      page: page,\r\n      prevPage: null,\r\n      nextPage: null,\r\n      hasPrevPage: false,\r\n      hasNextPage: false\r\n    };\r\n    var totalPages = limit > 0 ? Math.ceil(count / limit) || 1 : null;\r\n    meta.totalPages = totalPages;\r\n    meta.pagingCounter = (page - 1) * limit + 1; // Set prev page\r\n\r\n    if (page > 1) {\r\n      meta.hasPrevPage = true;\r\n      meta.prevPage = page - 1;\r\n    } else if (page == 1 && offset !== 0) {\r\n      meta.hasPrevPage = true;\r\n      meta.prevPage = 1;\r\n    } // Set next page\r\n\r\n\r\n    if (page < totalPages) {\r\n      meta.hasNextPage = true;\r\n      meta.nextPage = page + 1;\r\n    }\r\n\r\n    if (limit == 0) {\r\n      meta.limit = 0;\r\n      meta.totalPages = 1;\r\n      meta.page = 1;\r\n      meta.pagingCounter = 1;\r\n    }\r\n\r\n    Object.defineProperty(paginatedResult, path, {\r\n      value: meta,\r\n      writable: false\r\n    });\r\n  } // options properties for main document query\r\n\r\n\r\n  var populate = options.populate,\r\n      _options$read = options.read,\r\n      read = _options$read === void 0 ? {} : _options$read,\r\n      _options$select = options.select,\r\n      select = _options$select === void 0 ? '' : _options$select,\r\n      _options$pagination = options.pagination,\r\n      pagination = _options$pagination === void 0 ? true : _options$pagination,\r\n      pagingOptions = options.pagingOptions,\r\n      projection = options.projection;\r\n  var mQuery = this.findOne(query, projection);\r\n\r\n  if (read && read.pref) {\r\n    /**\r\n     * Determines the MongoDB nodes from which to read.\r\n     * @param read.pref one of the listed preference options or aliases\r\n     * @param read.tags optional tags for this query\r\n     */\r\n    mQuery.read(read.pref, read.tags);\r\n  }\r\n\r\n  if (select) {\r\n    mQuery.select(select);\r\n  }\r\n\r\n  return new Promise(function (resolve, reject) {\r\n    mQuery.exec().then(function (result) {\r\n      var newPopulate = [];\r\n\r\n      if (populate) {\r\n        newPopulate.push(newPopulate);\r\n      }\r\n\r\n      if (pagination && pagingOptions) {\r\n        if (Array.isArray(pagingOptions)) {\r\n          pagingOptions.forEach(function (option) {\r\n            var populate = getSubDocsPopulate(option);\r\n            option.count = result[populate.path].length;\r\n            newPopulate.push(populate);\r\n          });\r\n        } else {\r\n          var _populate = getSubDocsPopulate(pagingOptions);\r\n\r\n          pagingOptions.count = result[_populate.path].length;\r\n          newPopulate.push(_populate);\r\n        }\r\n      }\r\n\r\n      populateResult(result, newPopulate, function (err, paginatedResult) {\r\n        if (err) {\r\n          callback(err, null);\r\n          reject(err);\r\n          return;\r\n        } // convert paginatedResult to pagination docs\r\n\r\n\r\n        if (pagination && pagingOptions) {\r\n          if (Array.isArray(pagingOptions)) {\r\n            pagingOptions.forEach(function (option) {\r\n              constructDocs(paginatedResult, option);\r\n            });\r\n          } else {\r\n            constructDocs(paginatedResult, pagingOptions);\r\n          }\r\n        }\r\n\r\n        callback && callback(null, paginatedResult);\r\n        resolve(paginatedResult);\r\n      });\r\n    }).catch(function (err) {\r\n      console.error(err.message);\r\n      callback && callback(err, null);\r\n    });\r\n  });\r\n}\r\n\r\nmodule.exports = paginateSubDocs;", "\"use strict\";\r\n\r\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\r\n\r\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\r\n\r\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\n/**\r\n * @param {Object}              [query={}]\r\n * @param {Object}              [options={}]\r\n * @param {Object|String}       [options.select='']\r\n * @param {Object|String}       [options.projection={}]\r\n * @param {Object}              [options.options={}]\r\n * @param {Object|String}       [options.sort]\r\n * @param {Object|String}       [options.customLabels]\r\n * @param {Object}              [options.collation]\r\n * @param {Array|Object|String} [options.populate]\r\n * @param {Boolean}             [options.lean=false]\r\n * @param {Boolean}             [options.leanWithId=true]\r\n * @param {Number}              [options.offset=0] - Use offset or page to set skip position\r\n * @param {Number}              [options.page=1]\r\n * @param {Number}              [options.limit=10]\r\n * @param {Boolean}             [options.useEstimatedCount=true] - Enable estimatedDocumentCount for larger datasets. As the name says, the count may not abe accurate.\r\n * @param {Function}            [options.useCustomCountFn=false] - use custom function for count datasets.\r\n * @param {Object}              [options.read={}] - Determines the MongoDB nodes from which to read.\r\n * @param {Function}            [callback]\r\n *\r\n * @returns {Promise}\r\n */\r\nvar PaginationParametersHelper = require('./pagination-parameters');\r\n\r\nvar paginateSubDocsHelper = require('./pagination-subdocs');\r\n\r\nvar defaultOptions = {\r\n  customLabels: {\r\n    totalDocs: 'totalDocs',\r\n    limit: 'limit',\r\n    page: 'page',\r\n    totalPages: 'totalPages',\r\n    docs: 'docs',\r\n    nextPage: 'nextPage',\r\n    prevPage: 'prevPage',\r\n    pagingCounter: 'pagingCounter',\r\n    hasPrevPage: 'hasPrevPage',\r\n    hasNextPage: 'hasNextPage',\r\n    meta: null\r\n  },\r\n  collation: {},\r\n  lean: false,\r\n  leanWithId: true,\r\n  limit: 10,\r\n  projection: {},\r\n  select: '',\r\n  options: {},\r\n  pagination: true,\r\n  useEstimatedCount: false,\r\n  useCustomCountFn: false,\r\n  forceCountFn: false,\r\n  allowDiskUse: false,\r\n  customFind: 'find'\r\n};\r\n\r\nfunction paginate(query, options, callback) {\r\n  options = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions), paginate.options), options);\r\n  query = query || {};\r\n  var _options = options,\r\n      collation = _options.collation,\r\n      lean = _options.lean,\r\n      leanWithId = _options.leanWithId,\r\n      populate = _options.populate,\r\n      projection = _options.projection,\r\n      read = _options.read,\r\n      select = _options.select,\r\n      sort = _options.sort,\r\n      pagination = _options.pagination,\r\n      useEstimatedCount = _options.useEstimatedCount,\r\n      useCustomCountFn = _options.useCustomCountFn,\r\n      forceCountFn = _options.forceCountFn,\r\n      allowDiskUse = _options.allowDiskUse,\r\n      customFind = _options.customFind;\r\n\r\n  var customLabels = _objectSpread(_objectSpread({}, defaultOptions.customLabels), options.customLabels);\r\n\r\n  var limit = defaultOptions.limit;\r\n\r\n  if (pagination) {\r\n    limit = parseInt(options.limit, 10) > 0 ? parseInt(options.limit, 10) : 0;\r\n  }\r\n\r\n  var isCallbackSpecified = typeof callback === 'function';\r\n  var findOptions = options.options;\r\n  var offset;\r\n  var page;\r\n  var skip;\r\n  var docsPromise = []; // Labels\r\n\r\n  var labelDocs = customLabels.docs;\r\n  var labelLimit = customLabels.limit;\r\n  var labelNextPage = customLabels.nextPage;\r\n  var labelPage = customLabels.page;\r\n  var labelPagingCounter = customLabels.pagingCounter;\r\n  var labelPrevPage = customLabels.prevPage;\r\n  var labelTotal = customLabels.totalDocs;\r\n  var labelTotalPages = customLabels.totalPages;\r\n  var labelHasPrevPage = customLabels.hasPrevPage;\r\n  var labelHasNextPage = customLabels.hasNextPage;\r\n  var labelMeta = customLabels.meta;\r\n\r\n  if (Object.prototype.hasOwnProperty.call(options, 'offset')) {\r\n    offset = parseInt(options.offset, 10);\r\n    skip = offset;\r\n  } else if (Object.prototype.hasOwnProperty.call(options, 'page')) {\r\n    page = parseInt(options.page, 10) < 1 ? 1 : parseInt(options.page, 10);\r\n    skip = (page - 1) * limit;\r\n  } else {\r\n    offset = 0;\r\n    page = 1;\r\n    skip = offset;\r\n  }\r\n\r\n  if (!pagination) {\r\n    page = 1;\r\n  }\r\n\r\n  var countPromise; // Only run count when pagination is enabled\r\n\r\n  if (pagination) {\r\n    if (forceCountFn === true) {\r\n      // Deprecated since starting from MongoDB Node.JS driver v3.1\r\n      // Hack for mongo < v3.4\r\n      if (Object.keys(collation).length > 0) {\r\n        countPromise = this.count(query).collation(collation).exec();\r\n      } else {\r\n        countPromise = this.count(query).exec();\r\n      }\r\n    } else {\r\n      if (useEstimatedCount === true) {\r\n        countPromise = this.estimatedDocumentCount().exec();\r\n      } else if (typeof useCustomCountFn === 'function') {\r\n        countPromise = useCustomCountFn();\r\n      } else {\r\n        // Hack for mongo < v3.4\r\n        if (Object.keys(collation).length > 0) {\r\n          countPromise = this.countDocuments(query).collation(collation).exec();\r\n        } else {\r\n          countPromise = this.countDocuments(query).exec();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (limit) {\r\n    var mQuery = this[customFind](query, projection, findOptions);\r\n\r\n    if (populate) {\r\n      mQuery.populate(populate);\r\n    }\r\n\r\n    mQuery.select(select);\r\n    mQuery.sort(sort);\r\n    mQuery.lean(lean);\r\n\r\n    if (read && read.pref) {\r\n      /**\r\n       * Determines the MongoDB nodes from which to read.\r\n       * @param read.pref one of the listed preference options or aliases\r\n       * @param read.tags optional tags for this query\r\n       */\r\n      mQuery.read(read.pref, read.tags);\r\n    } // Hack for mongo < v3.4\r\n\r\n\r\n    if (Object.keys(collation).length > 0) {\r\n      mQuery.collation(collation);\r\n    }\r\n\r\n    if (pagination) {\r\n      mQuery.skip(skip);\r\n      mQuery.limit(limit);\r\n    }\r\n\r\n    try {\r\n      if (allowDiskUse === true) {\r\n        mQuery.allowDiskUse();\r\n      }\r\n    } catch (ex) {\r\n      console.error('Your MongoDB version does not support `allowDiskUse`.');\r\n    }\r\n\r\n    docsPromise = mQuery.exec();\r\n\r\n    if (lean && leanWithId) {\r\n      docsPromise = docsPromise.then(function (docs) {\r\n        docs.forEach(function (doc) {\r\n          if (doc._id) {\r\n            doc.id = String(doc._id);\r\n          }\r\n        });\r\n        return docs;\r\n      });\r\n    }\r\n  }\r\n\r\n  return Promise.all([countPromise, docsPromise]).then(function (values) {\r\n    var count = values[0];\r\n    var docs = values[1];\r\n\r\n    if (pagination !== true) {\r\n      count = docs.length;\r\n    }\r\n\r\n    var meta = {\r\n      [labelTotal]: count\r\n    };\r\n    var result = {};\r\n\r\n    if (typeof offset !== 'undefined') {\r\n      meta.offset = offset;\r\n      page = Math.ceil((offset + 1) / limit);\r\n    }\r\n\r\n    var pages = limit > 0 ? Math.ceil(count / limit) || 1 : null; // Setting default values\r\n\r\n    meta[labelLimit] = count;\r\n    meta[labelTotalPages] = 1;\r\n    meta[labelPage] = page;\r\n    meta[labelPagingCounter] = (page - 1) * limit + 1;\r\n    meta[labelHasPrevPage] = false;\r\n    meta[labelHasNextPage] = false;\r\n    meta[labelPrevPage] = null;\r\n    meta[labelNextPage] = null;\r\n\r\n    if (pagination) {\r\n      meta[labelLimit] = limit;\r\n      meta[labelTotalPages] = pages; // Set prev page\r\n\r\n      if (page > 1) {\r\n        meta[labelHasPrevPage] = true;\r\n        meta[labelPrevPage] = page - 1;\r\n      } else if (page == 1 && typeof offset !== 'undefined' && offset !== 0) {\r\n        meta[labelHasPrevPage] = true;\r\n        meta[labelPrevPage] = 1;\r\n      } // Set next page\r\n\r\n\r\n      if (page < pages) {\r\n        meta[labelHasNextPage] = true;\r\n        meta[labelNextPage] = page + 1;\r\n      }\r\n    } // Remove customLabels set to false\r\n\r\n\r\n    delete meta['false'];\r\n\r\n    if (limit == 0) {\r\n      meta[labelLimit] = 0;\r\n      meta[labelTotalPages] = 1;\r\n      meta[labelPage] = 1;\r\n      meta[labelPagingCounter] = 1;\r\n      meta[labelPrevPage] = null;\r\n      meta[labelNextPage] = null;\r\n      meta[labelHasPrevPage] = false;\r\n      meta[labelHasNextPage] = false;\r\n    }\r\n\r\n    if (labelMeta) {\r\n      result = {\r\n        [labelDocs]: docs,\r\n        [labelMeta]: meta\r\n      };\r\n    } else {\r\n      result = _objectSpread({\r\n        [labelDocs]: docs\r\n      }, meta);\r\n    }\r\n\r\n    return isCallbackSpecified ? callback(null, result) : Promise.resolve(result);\r\n  }).catch(function (error) {\r\n    return isCallbackSpecified ? callback(error) : Promise.reject(error);\r\n  });\r\n}\r\n/**\r\n * @param {Schema} schema\r\n */\r\n\r\n\r\nmodule.exports = function (schema) {\r\n  schema.statics.paginate = paginate;\r\n  schema.statics.paginateSubDocs = paginateSubDocsHelper;\r\n};\r\n\r\nmodule.exports.PaginationParameters = PaginationParametersHelper;\r\nmodule.exports.paginateSubDocs = paginateSubDocsHelper;\r\nmodule.exports.paginate = paginate;"],
  "mappings": "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",
  "names": ["PaginationParametersHelper", "populate", "pagination", "callback"]
}
