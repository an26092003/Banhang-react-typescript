{
  "version": 3,
  "sources": ["../../cookie-parser/node_modules/cookie/index.js", "../../cookie-parser/index.js"],
  "sourcesContent": ["/*!\r\n * cookie\r\n * Copyright(c) 2012-2014 Roman Shtylman\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nexports.parse = parse;\r\nexports.serialize = serialize;\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar decode = decodeURIComponent;\r\nvar encode = encodeURIComponent;\r\nvar pairSplitRegExp = /; */;\r\n\r\n/**\r\n * RegExp to match field-content in RFC 7230 sec 3.2\r\n *\r\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\r\n * field-vchar   = VCHAR / obs-text\r\n * obs-text      = %x80-FF\r\n */\r\n\r\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\r\n\r\n/**\r\n * Parse a cookie header.\r\n *\r\n * Parse the given cookie header string into an object\r\n * The object has the various cookies as keys(names) => values\r\n *\r\n * @param {string} str\r\n * @param {object} [options]\r\n * @return {object}\r\n * @public\r\n */\r\n\r\nfunction parse(str, options) {\r\n  if (typeof str !== 'string') {\r\n    throw new TypeError('argument str must be a string');\r\n  }\r\n\r\n  var obj = {}\r\n  var opt = options || {};\r\n  var pairs = str.split(pairSplitRegExp);\r\n  var dec = opt.decode || decode;\r\n\r\n  for (var i = 0; i < pairs.length; i++) {\r\n    var pair = pairs[i];\r\n    var eq_idx = pair.indexOf('=');\r\n\r\n    // skip things that don't look like key=value\r\n    if (eq_idx < 0) {\r\n      continue;\r\n    }\r\n\r\n    var key = pair.substr(0, eq_idx).trim()\r\n    var val = pair.substr(++eq_idx, pair.length).trim();\r\n\r\n    // quoted values\r\n    if ('\"' == val[0]) {\r\n      val = val.slice(1, -1);\r\n    }\r\n\r\n    // only assign once\r\n    if (undefined == obj[key]) {\r\n      obj[key] = tryDecode(val, dec);\r\n    }\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Serialize data into a cookie header.\r\n *\r\n * Serialize the a name value pair into a cookie string suitable for\r\n * http headers. An optional options object specified cookie parameters.\r\n *\r\n * serialize('foo', 'bar', { httpOnly: true })\r\n *   => \"foo=bar; httpOnly\"\r\n *\r\n * @param {string} name\r\n * @param {string} val\r\n * @param {object} [options]\r\n * @return {string}\r\n * @public\r\n */\r\n\r\nfunction serialize(name, val, options) {\r\n  var opt = options || {};\r\n  var enc = opt.encode || encode;\r\n\r\n  if (typeof enc !== 'function') {\r\n    throw new TypeError('option encode is invalid');\r\n  }\r\n\r\n  if (!fieldContentRegExp.test(name)) {\r\n    throw new TypeError('argument name is invalid');\r\n  }\r\n\r\n  var value = enc(val);\r\n\r\n  if (value && !fieldContentRegExp.test(value)) {\r\n    throw new TypeError('argument val is invalid');\r\n  }\r\n\r\n  var str = name + '=' + value;\r\n\r\n  if (null != opt.maxAge) {\r\n    var maxAge = opt.maxAge - 0;\r\n\r\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\r\n      throw new TypeError('option maxAge is invalid')\r\n    }\r\n\r\n    str += '; Max-Age=' + Math.floor(maxAge);\r\n  }\r\n\r\n  if (opt.domain) {\r\n    if (!fieldContentRegExp.test(opt.domain)) {\r\n      throw new TypeError('option domain is invalid');\r\n    }\r\n\r\n    str += '; Domain=' + opt.domain;\r\n  }\r\n\r\n  if (opt.path) {\r\n    if (!fieldContentRegExp.test(opt.path)) {\r\n      throw new TypeError('option path is invalid');\r\n    }\r\n\r\n    str += '; Path=' + opt.path;\r\n  }\r\n\r\n  if (opt.expires) {\r\n    if (typeof opt.expires.toUTCString !== 'function') {\r\n      throw new TypeError('option expires is invalid');\r\n    }\r\n\r\n    str += '; Expires=' + opt.expires.toUTCString();\r\n  }\r\n\r\n  if (opt.httpOnly) {\r\n    str += '; HttpOnly';\r\n  }\r\n\r\n  if (opt.secure) {\r\n    str += '; Secure';\r\n  }\r\n\r\n  if (opt.sameSite) {\r\n    var sameSite = typeof opt.sameSite === 'string'\r\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\r\n\r\n    switch (sameSite) {\r\n      case true:\r\n        str += '; SameSite=Strict';\r\n        break;\r\n      case 'lax':\r\n        str += '; SameSite=Lax';\r\n        break;\r\n      case 'strict':\r\n        str += '; SameSite=Strict';\r\n        break;\r\n      case 'none':\r\n        str += '; SameSite=None';\r\n        break;\r\n      default:\r\n        throw new TypeError('option sameSite is invalid');\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n/**\r\n * Try decoding a string using a decoding function.\r\n *\r\n * @param {string} str\r\n * @param {function} decode\r\n * @private\r\n */\r\n\r\nfunction tryDecode(str, decode) {\r\n  try {\r\n    return decode(str);\r\n  } catch (e) {\r\n    return str;\r\n  }\r\n}\r\n", "/*!\r\n * cookie-parser\r\n * Copyright(c) 2014 TJ Holowaychuk\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar cookie = require('cookie')\r\nvar signature = require('cookie-signature')\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = cookieParser\r\nmodule.exports.JSONCookie = JSONCookie\r\nmodule.exports.JSONCookies = JSONCookies\r\nmodule.exports.signedCookie = signedCookie\r\nmodule.exports.signedCookies = signedCookies\r\n\r\n/**\r\n * Parse Cookie header and populate `req.cookies`\r\n * with an object keyed by the cookie names.\r\n *\r\n * @param {string|array} [secret] A string (or array of strings) representing cookie signing secret(s).\r\n * @param {Object} [options]\r\n * @return {Function}\r\n * @public\r\n */\r\n\r\nfunction cookieParser (secret, options) {\r\n  var secrets = !secret || Array.isArray(secret)\r\n    ? (secret || [])\r\n    : [secret]\r\n\r\n  return function cookieParser (req, res, next) {\r\n    if (req.cookies) {\r\n      return next()\r\n    }\r\n\r\n    var cookies = req.headers.cookie\r\n\r\n    req.secret = secrets[0]\r\n    req.cookies = Object.create(null)\r\n    req.signedCookies = Object.create(null)\r\n\r\n    // no cookies\r\n    if (!cookies) {\r\n      return next()\r\n    }\r\n\r\n    req.cookies = cookie.parse(cookies, options)\r\n\r\n    // parse signed cookies\r\n    if (secrets.length !== 0) {\r\n      req.signedCookies = signedCookies(req.cookies, secrets)\r\n      req.signedCookies = JSONCookies(req.signedCookies)\r\n    }\r\n\r\n    // parse JSON cookies\r\n    req.cookies = JSONCookies(req.cookies)\r\n\r\n    next()\r\n  }\r\n}\r\n\r\n/**\r\n * Parse JSON cookie string.\r\n *\r\n * @param {String} str\r\n * @return {Object} Parsed object or undefined if not json cookie\r\n * @public\r\n */\r\n\r\nfunction JSONCookie (str) {\r\n  if (typeof str !== 'string' || str.substr(0, 2) !== 'j:') {\r\n    return undefined\r\n  }\r\n\r\n  try {\r\n    return JSON.parse(str.slice(2))\r\n  } catch (err) {\r\n    return undefined\r\n  }\r\n}\r\n\r\n/**\r\n * Parse JSON cookies.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @public\r\n */\r\n\r\nfunction JSONCookies (obj) {\r\n  var cookies = Object.keys(obj)\r\n  var key\r\n  var val\r\n\r\n  for (var i = 0; i < cookies.length; i++) {\r\n    key = cookies[i]\r\n    val = JSONCookie(obj[key])\r\n\r\n    if (val) {\r\n      obj[key] = val\r\n    }\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\n/**\r\n * Parse a signed cookie string, return the decoded value.\r\n *\r\n * @param {String} str signed cookie string\r\n * @param {string|array} secret\r\n * @return {String} decoded value\r\n * @public\r\n */\r\n\r\nfunction signedCookie (str, secret) {\r\n  if (typeof str !== 'string') {\r\n    return undefined\r\n  }\r\n\r\n  if (str.substr(0, 2) !== 's:') {\r\n    return str\r\n  }\r\n\r\n  var secrets = !secret || Array.isArray(secret)\r\n    ? (secret || [])\r\n    : [secret]\r\n\r\n  for (var i = 0; i < secrets.length; i++) {\r\n    var val = signature.unsign(str.slice(2), secrets[i])\r\n\r\n    if (val !== false) {\r\n      return val\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Parse signed cookies, returning an object containing the decoded key/value\r\n * pairs, while removing the signed key from obj.\r\n *\r\n * @param {Object} obj\r\n * @param {string|array} secret\r\n * @return {Object}\r\n * @public\r\n */\r\n\r\nfunction signedCookies (obj, secret) {\r\n  var cookies = Object.keys(obj)\r\n  var dec\r\n  var key\r\n  var ret = Object.create(null)\r\n  var val\r\n\r\n  for (var i = 0; i < cookies.length; i++) {\r\n    key = cookies[i]\r\n    val = obj[key]\r\n    dec = signedCookie(val, secret)\r\n\r\n    if (val !== dec) {\r\n      ret[key] = dec\r\n      delete obj[key]\r\n    }\r\n  }\r\n\r\n  return ret\r\n}\r\n"],
  "mappings": "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",
  "names": ["decode", "cookieParser"]
}
